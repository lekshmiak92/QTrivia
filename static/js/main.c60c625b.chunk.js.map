{"version":3,"sources":["firebase.js","components/question.jsx","components/answerChoice.jsx","components/nextButton.jsx","components/gameStatistics.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","Question","props","react_default","a","createElement","Col","Card_default","className","Body","ques","AnswerChoice","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isCorrectAnswer","clickStatus","chosenAnswer","answerOption","correctAnswer","isWrongAnswer","revealresult","state","Fragment","onClick","handleClick","Component","NextButton","Row_default","Button_default","variant","onClickOfNext","text","disabled","GameStatistics","Row","currentQuestion","gamePoints","parameters","url","queryString","split","window","location","search","slice","obj","arr","i","length","paramName","paramValue","toLowerCase","match","key","replace","index","exec","push","getAllUrlParams","href","id","isDebug","isdebug","isTestUser","istestuser","console","log","App","getQuestions","fetch","then","res","json","apiData","setState","question","results","answer","correct_answer","wrongAnswers","incorrect_answers","choseCorrectAnswer","ref","concat","gameID","set","update","gameStatus","shuffleChoices","choiceArray","sort","b","Math","random","choicesArray","getUserId","userId","token","userName","playerList","name","QTalkApp","getUserAuthToken","_unused","method","headers","X-Auth-Id-Token","response","data","catch","e","once","snapshot","val","zeroIndex","indexOf","isInitialiser","error","loading","handleOptionClick","chosenOption","target","textContent","points","totalPoints","userLevel","document","pathname","_this2","Container","gameStatistics","map","element","answerChoice","prophistory","history","nextButton","handleClickOfNext","Boolean","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c60c625b.chunk.js","sourcesContent":["// import firebase from \"firebase\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBwtQofl2d8GoBm6TU67q1ImaLqWH7Tevc\",\n  authDomain: \"qtrivia-1ebab.firebaseapp.com\",\n  databaseURL: \"https://qtrivia-1ebab.firebaseio.com\",\n  projectId: \"qtrivia-1ebab\",\n  storageBucket: \"qtrivia-1ebab.appspot.com\",\n  messagingSenderId: \"13126744922\",\n  appId: \"1:13126744922:web:993d64f1600b169c\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;\nexport const database = firebase.database();\n","import React from \"react\";\nimport \"../App.css\";\nimport Card from \"react-bootstrap/Card\";\nimport { Col } from \"react-bootstrap\";\n\nconst Question = props => {\n  return (\n    <Col>\n      <Card className=\"quesCard\">\n        <Card.Body>\n          <pre>{props.ques}</pre>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nexport default Question;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport Card from \"react-bootstrap/Card\";\n// import GameOverPopup from \"./gameOverPopup\";\n\nclass AnswerChoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  isCorrectAnswer = () => {\n    return (\n      this.props.clickStatus === \"on\" &&\n      this.props.chosenAnswer !== \"\" &&\n      this.props.answerOption === this.props.correctAnswer\n      // (this.props.revealresult === true ||\n      //   this.props.answerOption === this.props.correctAnswer) ||\n      // this.props.chosenAnswer === this.props.answerOption\n    );\n  };\n\n  isWrongAnswer = () => {\n    return (\n      this.props.clickStatus === \"on\" &&\n      this.props.revealresult === false &&\n      this.props.chosenAnswer === this.props.answerOption\n    );\n  };\n  render() {\n    if (this.isCorrectAnswer()) {\n      return (\n        <Card className=\"answerWrap bg-green \">\n          <Card.Body className=\"noPadding\">{this.props.answerOption}</Card.Body>\n        </Card>\n      );\n    } else if (this.isWrongAnswer()) {\n      return (\n        <>\n          <Card className=\"answerWrap bg-red \">\n            <Card.Body className=\"noPadding\">\n              {this.props.answerOption}\n            </Card.Body>\n          </Card>\n          {/* <GameOverPopup\n            prophistory={this.props.prophistory}\n            points={this.props.points}\n            setLocalStorage={this.props.setLocalStorage}\n          /> */}\n        </>\n      );\n    } else if (this.props.clickStatus === \"on\") {\n      return (\n        <Card className=\"answerWrap\">\n          <Card.Body className=\"noPadding\">{this.props.answerOption}</Card.Body>\n        </Card>\n      );\n    } else {\n      return (\n        <Card className=\"answerWrap\" onClick={this.props.handleClick}>\n          <Card.Body className=\"noPadding\">{this.props.answerOption}</Card.Body>\n        </Card>\n      );\n    }\n  }\n}\n\nexport default AnswerChoice;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport \"../App.css\";\n\nconst NextButton = props => {\n  if (props.clickStatus === \"on\") {\n    return (\n      <Row className=\"navWrap\">\n        <Button variant=\"primary\" onClick={props.onClickOfNext}>\n          {props.text}\n        </Button>\n      </Row>\n    );\n  } else {\n    return (\n      <Row className=\"navWrap\">\n        <Button variant=\"primary\" onClick={props.onClickOfNext} disabled>\n          {props.text}\n        </Button>\n      </Row>\n    );\n  }\n};\n\nexport default NextButton;\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nconst GameStatistics = props => {\n  return (\n    <Row className=\"statistics\">\n      <Col>\n        Que.No: <span className=\"gamePoints\">{props.currentQuestion}</span>\n      </Col>\n      <Col>\n        Points:<span className=\"gamePoints\">{props.gamePoints}</span>\n      </Col>\n    </Row>\n  );\n};\n\nexport default GameStatistics;\n","import React, { Component } from \"react\";\nimport { database } from \"./firebase\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport Question from \"./components/question\";\nimport AnswerChoice from \"./components/answerChoice\";\nimport NextButton from \"./components/nextButton\";\nimport GameStatistics from \"./components/gameStatistics\";\n\nfunction getAllUrlParams(url) {\n  var queryString = url ? url.split(\"?\")[1] : window.location.search.slice(1);\n  var obj = {};\n  if (queryString) {\n    queryString = queryString.split(\"#\")[0];\n    var arr = queryString.split(\"&\");\n    for (var i = 0; i < arr.length; i++) {\n      var a = arr[i].split(\"=\");\n      var paramName = a[0];\n      var paramValue = typeof a[1] === \"undefined\" ? true : a[1];\n      paramName = paramName.toLowerCase();\n      if (typeof paramValue === \"string\") paramValue = paramValue.toLowerCase();\n      if (paramName.match(/\\[(\\d+)?\\]$/)) {\n        var key = paramName.replace(/\\[(\\d+)?\\]/, \"\");\n        if (!obj[key]) obj[key] = [];\n        if (paramName.match(/\\[\\d+\\]$/)) {\n          var index = /\\[(\\d+)\\]/.exec(paramName)[1];\n          obj[key][index] = paramValue;\n        } else {\n          obj[key].push(paramValue);\n        }\n      } else {\n        if (!obj[paramName]) {\n          obj[paramName] = paramValue;\n        } else if (obj[paramName] && typeof obj[paramName] === \"string\") {\n          obj[paramName] = [obj[paramName]];\n          obj[paramName].push(paramValue);\n        } else {\n          obj[paramName].push(paramValue);\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nlet parameters = getAllUrlParams(window.location.href);\nlet id = parameters.id ? parameters.id : \"\";\nlet isDebug =\n  parameters.isdebug === true ? true : parameters.isdebug === \"true\";\nlet isTestUser =\n  parameters.istestuser === true ? true : parameters.istestuser === \"true\";\n\nconsole.log(parameters);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: \"Loading...\",\n      answer: \"\",\n      wrongAnswers: [],\n      choicesArray: [],\n      chosenAnswer: \"\",\n      clickStatus: \"off\",\n      choseCorrectAnswer: false,\n      points: 0,\n      currentQuestion: 0,\n      userName: \"\",\n      totalPoints: 0,\n      userLevel: \"\",\n      gameID: document.location.pathname\n        ? document.location.pathname.slice(1, 8) === \"QTrivia\"\n          ? id\n          : \"no_game_id\"\n        : \"no_location_pathname\",\n      userId: \"\",\n      isInitialiser: false\n    };\n  }\n\n  componentDidMount() {\n    // this.getQuestions();\n    // this.fetchGameData();\n    this.getUserId();\n    console.log(this.state.isInitialiser);\n\n    // database\n    //   .ref(`rooms/${this.state.gameID}/gameData`)\n    //   .update({ json: \"dummydata\" });\n  }\n\n  getQuestions = () => {\n    fetch(\n      `https://opentdb.com/api.php?amount=10&category=10&difficulty=easy&type=multiple`\n    )\n      .then(res => res.json())\n      .then(apiData => {\n        this.setState({\n          question: apiData.results[0].question,\n          answer: apiData.results[0].correct_answer,\n          wrongAnswers: apiData.results[0].incorrect_answers,\n          clickStatus: \"off\",\n          choseCorrectAnswer: false,\n          currentQuestion: this.state.currentQuestion + 1\n        });\n        database.ref(`rooms/${this.state.gameID}/gameData`).set(apiData);\n        database.ref(`rooms/${this.state.gameID}`).update({\n          gameStatus: \"start\",\n          currentQuestion: 0\n        });\n\n        this.shuffleChoices();\n      });\n  };\n\n  shuffleChoices = () => {\n    let choiceArray = this.state.wrongAnswers.concat(this.state.answer);\n    choiceArray = choiceArray.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n\n    this.setState({\n      choicesArray: choiceArray\n    });\n\n    database.ref(`rooms/${this.state.gameID}/choiceOptions`).set(choiceArray);\n  };\n\n  getUserId = () => {\n    console.log(\"getUser Id functions\", this.state.gameID);\n\n    if (!this.state.userId) {\n      console.log(\"[App.js] getUserId()\");\n      let token, userId, userName;\n      let playerList = {\n        id: [0, 0],\n        name: [\"\", \"\"]\n      };\n\n      try {\n        token = window.QTalkApp.getUserAuthToken();\n        //database.ref('token').set(token ? token : \"no token\");\n      } catch {\n        // token = \"\";\n        token = \"cdc9b8e03a9e85e02a425983028b602ecdd7bdd5\";\n      }\n\n      let url = isDebug\n        ? \"https://staging.remote.qtalk.io/v1/verifyAuthIdToken\"\n        : \"https://remote.qtalk.io/v1/verifyAuthIdToken\";\n\n      if (isTestUser) {\n        url = url + \"?isTestUser=true\";\n      }\n\n      console.log(url);\n\n      if (token) {\n        fetch(url, {\n          method: \"GET\",\n          headers: {\n            \"X-Auth-Id-Token\": token ? token : \"\"\n          }\n        })\n          .then(response => {\n            return response.json();\n          })\n          .then(data => {\n            console.log(data.userId);\n            userId = data.userId ? \"nulluserid\" : 1;\n            userName = \"mario\";\n          })\n          .catch(e => {\n            console.log(e);\n          });\n        this.setState({\n          userId: userId,\n          userName: userName\n        });\n      }\n\n      database\n        .ref(`rooms/${this.state.gameID}/players`)\n        .once(\"value\", snapshot => {\n          if (snapshot) {\n            console.log(snapshot);\n            console.log(snapshot.val());\n\n            playerList = snapshot.val();\n\n            if (!playerList) {\n              playerList = {\n                id: [],\n                name: []\n              };\n            }\n\n            try {\n              let zeroIndex = playerList.id.indexOf(0);\n              console.log(playerList.id);\n              console.log(playerList);\n              if (zeroIndex !== -1) {\n                playerList.id[zeroIndex] = userId ? userId : 0;\n                playerList.name[zeroIndex] = userName ? userName : \"\";\n              } else {\n                if (playerList.id.length === 0) {\n                  console.log(\"hoy\");\n                  this.setState({ isInitialiser: true });\n\n                  database\n                    .ref(`rooms/${this.state.gameID}/initialiser`)\n                    .set(userId ? userId : 999);\n\n                  this.getQuestions();\n                }\n                playerList.id.push(userId ? userId : 0);\n                playerList.name.push(userName ? userName : \"\");\n              }\n            } catch (error) {\n              console.log(error);\n            }\n\n            this.setState({\n              playerList: playerList,\n              loading: false\n            });\n\n            console.log(playerList);\n            database.ref(`rooms/${this.state.gameID}/players`).set(playerList);\n          }\n        });\n      console.log(\"token\", token);\n    }\n  };\n\n  handleOptionClick = e => {\n    let chosenOption = e.target.textContent;\n\n    if (chosenOption === this.state.answer) {\n      this.setState({\n        clickStatus: \"on\",\n        choseCorrectAnswer: true,\n        chosenAnswer: chosenOption,\n        points: this.state.points + 20\n      });\n    } else {\n      this.setState({\n        clickStatus: \"on\",\n        choseCorrectAnswer: false,\n        chosenAnswer: chosenOption\n      });\n    }\n  };\n\n  // handleClickOfNext = () => {\n  //   this.getQuestions();\n  // };\n\n  // storeGameData = () => {\n  //   let userData = {\n  //     name: this.state.userName,\n  //     points: this.state.points + this.state.totalPoints\n  //   };\n\n  //   window.localStorage.setItem(\"trivia\", JSON.stringify(userData));\n  // };\n\n  // fetchGameData = () => {\n  //   const gameData = JSON.parse(window.localStorage.getItem(\"trivia\"));\n  //   if (gameData) {\n  //     this.setState({\n  //       userName: gameData.name,\n  //       totalPoints: gameData.points\n  //     });\n  //   }\n  // };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <GameStatistics\n            gamePoints={this.state.points}\n            currentQuestion={this.state.currentQuestion}\n          />\n          <Row>\n            <Question ques={this.state.question} />\n          </Row>\n          {this.state.choicesArray.map((element, index) => (\n            <AnswerChoice\n              key={index}\n              answerOption={element}\n              handleClick={this.handleOptionClick}\n              chosenAnswer={this.state.chosenAnswer}\n              revealresult={this.state.choseCorrectAnswer}\n              clickStatus={this.state.clickStatus}\n              correctAnswer={this.state.answer}\n              prophistory={this.props.history}\n              points={this.state.points}\n              // setLocalStorage={this.storeGameData}\n            />\n          ))}\n\n          <NextButton\n            text=\"Next\"\n            clickStatus={this.state.clickStatus}\n            onClickOfNext={this.handleClickOfNext}\n            choseCorrectAnswer={this.state.choseCorrectAnswer}\n          />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}