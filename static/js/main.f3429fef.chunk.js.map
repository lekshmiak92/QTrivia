{"version":3,"sources":["home.jsx","firebase.js","components/question.jsx","components/answerChoice.jsx","components/nextButton.jsx","components/gameStatistics.jsx","components/gameOverPopup.jsx","components/countDown.jsx","App.js","components/instructions.jsx","appRouter.jsx","serviceWorker.js","index.js","assets/logoTransparent.png","assets/Button-Play-icon.png","assets/qmark.png"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","Container","Image","src","logo","fluid","react_router_dom","to","start","howToPlay","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","Question","Col","Card_default","Body","ques","AnswerChoice","isCorrectAnswer","clickStatus","chosenAnswer","answerOption","correctAnswer","isWrongAnswer","revealresult","xs","sm","es_Card","Fragment","onClick","handleClick","NextButton","disabledProp","Row_default","style","padding","Button_default","variant","onClickOfNext","disabled","text","GameStatistics","Row","currentQuestion","gamePoints","GameOverPopup","handleClose","setState","show","handleNew","_this2","setTimeout","array","points","Modal","centered","Header","Title","map","element","index","key","Footer","es_Button","CountDown","tick","bind","assertThisInitialized","seconds","timer","setInterval","clearInterval","onFinish","ProgressBar","animated","now","label","concat","parameters","url","queryString","split","window","location","search","slice","obj","arr","i","length","paramName","paramValue","toLowerCase","match","replace","exec","push","getAllUrlParams","href","id","isDebug","isdebug","isTestUser","istestuser","console","log","App","getUserId","gameID","userId","token","userName","playerList","name","QTalkApp","getUserAuthToken","e","fetch","method","headers","X-Auth-Id-Token","then","response","json","data","userDetails","displayName","catch","ref","once","snapshot","val","zeroIndex","indexOf","isInitialiser","getQuestions","update","initialiser","playerPoints","results","gameLib","gameBegin","gameTime","error","loading","set","res","apiData","gamelib","gameStatus","getState","list","wrongchoices","incorrect_answers","rightchoice","correct_answer","multipleOptions","shuffleChoices","que","entities","decodeHTML","question","answer","choicesArray","wrongOptions","rightOption","choiceArray","sort","b","Math","random","handleOptionClick","chosenOption","target","textContent","choseCorrectAnswer","handleClickOfNext","resetGameBegin","setGameEnd","gameEnd","toString","substring","wrongAnswers","totalPoints","userLevel","document","pathname","pointsTable","on","notifyGameRoundStarted","notifyGameRoundEnded","abc","entries","popup","_this3","stat","components_gameOverPopup","countDown","gameStatistics","answerChoice","prophistory","history","nextButton","Instructions","AppRouter","basename","react_router","path","exact","component","home","Boolean","hostname","ReactDOM","render","appRouter","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f3429fef.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Container, Image } from \"react-bootstrap\";\nimport logo from \"./assets/logoTransparent.png\";\nimport start from \"./assets/Button-Play-icon.png\";\nimport howToPlay from \"./assets/qmark.png\";\nimport \"./App.css\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"Game\">\n        <Container className=\"pad1\">\n          <Image src={logo} fluid />\n          <ul>\n            <li className=\"hometabs\">\n              <Link to=\"/game/\">\n                <Image src={start} fluid className=\"start\" />\n                <span className=\"text\"> Start</span>\n              </Link>\n            </li>\n            <li className=\"hometabs\">\n              <Link to=\"/howToPlay/\">\n                <Image src={howToPlay} fluid className=\"start\" />\n                <span className=\"text\"> How to Play</span>\n              </Link>\n            </li>\n          </ul>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","// import firebase from \"firebase\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBwtQofl2d8GoBm6TU67q1ImaLqWH7Tevc\",\n  authDomain: \"qtrivia-1ebab.firebaseapp.com\",\n  databaseURL: \"https://qtrivia-1ebab.firebaseio.com\",\n  projectId: \"qtrivia-1ebab\",\n  storageBucket: \"qtrivia-1ebab.appspot.com\",\n  messagingSenderId: \"13126744922\",\n  appId: \"1:13126744922:web:993d64f1600b169c\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport default firebase;\nexport const database = firebase.database();\nexport const firebaseAuth = firebase.auth();\n","import React from \"react\";\nimport \"../App.css\";\nimport Card from \"react-bootstrap/Card\";\nimport { Col } from \"react-bootstrap\";\n\nconst Question = props => {\n  return (\n    <Col>\n      <Card className=\"quesCard\">\n        <Card.Body>\n          <pre>{props.ques}</pre>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nexport default Question;\n","import React, { Component } from \"react\";\nimport \"../App.css\";\nimport { Card, Col } from \"react-bootstrap\";\n\nclass AnswerChoice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  isCorrectAnswer = () => {\n    return (\n      this.props.clickStatus === \"on\" &&\n      this.props.chosenAnswer !== \"\" &&\n      this.props.answerOption === this.props.correctAnswer\n    );\n  };\n\n  isWrongAnswer = () => {\n    return (\n      this.props.clickStatus === \"on\" &&\n      this.props.revealresult === false &&\n      this.props.chosenAnswer === this.props.answerOption\n    );\n  };\n\n  render() {\n    if (this.isCorrectAnswer()) {\n      return (\n        <Col xs={12} sm={6} className=\"leftPull bottomPadding\">\n          <Card className=\"answerWrap bg-green \">\n            <Card.Body className=\"noPadding\">\n              {this.props.answerOption}\n            </Card.Body>\n          </Card>\n        </Col>\n      );\n    } else if (this.isWrongAnswer()) {\n      return (\n        <>\n          <Col xs={12} sm={6} className=\"leftPull bottomPadding\">\n            <Card className=\"answerWrap bg-red \">\n              <Card.Body className=\"noPadding\">\n                {this.props.answerOption}\n              </Card.Body>\n            </Card>\n          </Col>\n        </>\n      );\n    } else if (this.props.clickStatus === \"on\") {\n      return (\n        <Col xs={12} sm={6} className=\"leftPull bottomPadding\">\n          <Card className=\"answerWrap bg-lightBlue\">\n            <Card.Body className=\"noPadding\">\n              {this.props.answerOption}\n            </Card.Body>\n          </Card>\n        </Col>\n      );\n    } else {\n      return (\n        <Col xs={12} sm={6} className=\"leftPull bottomPadding\">\n          <Card\n            className=\"answerWrap bg-lightBlue\"\n            onClick={this.props.handleClick}\n          >\n            <Card.Body className=\"noPadding\">\n              {this.props.answerOption}\n            </Card.Body>\n          </Card>\n        </Col>\n      );\n    }\n  }\n}\n\nexport default AnswerChoice;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport \"../App.css\";\n\nconst NextButton = props => {\n  let disabledProp;\n  if (props.clickStatus === \"on\") {\n    disabledProp = false;\n  } else {\n    disabledProp = true;\n  }\n\n  return (\n    <Row className=\"navWrap\" style={{ padding: \"0% 10%\" }}>\n      <Button\n        variant=\"warning\"\n        onClick={props.onClickOfNext}\n        disabled={disabledProp}\n        // className=\"nextButton\"\n      >\n        {props.text}\n      </Button>\n    </Row>\n  );\n};\n\nexport default NextButton;\n","import React from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport \"../App.css\";\n\nconst GameStatistics = props => {\n  return (\n    <Row className=\"statistics\">\n      <Col>\n        Que.No: <span className=\"gamePoints\">{props.currentQuestion}</span>\n      </Col>\n      <Col>\n        Points:<span className=\"gamePoints\">{props.gamePoints}</span>\n      </Col>\n    </Row>\n  );\n};\n\nexport default GameStatistics;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport \"./gameOverPopup.css\";\n\nclass GameOverPopup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false\n    };\n  }\n  handleClose = () => {\n    this.setState({ show: false });\n  };\n\n  handleNew = () => {\n    this.handleClose();\n  };\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ show: true });\n    }, 2000);\n  }\n\n  render() {\n    let array = this.props.points;\n\n    return (\n      <>\n        <Modal show={this.state.show} centered>\n          <Modal.Header>\n            <Modal.Title>Time up ..!! </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h4>Scoreboard</h4>\n            {array.map((element, index) => (\n              <p className=\"scorerow\" key={index}>\n                <span className=\"username\">{element[0]}</span>\n                <span className=\"userscore\">{element[1]}</span>\n              </p>\n            ))}\n          </Modal.Body>\n          <Modal.Footer>\n            <Link to=\"/\">\n              <Button variant=\"secondary\" onClick={this.handleNew}>\n                Home\n              </Button>\n            </Link>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default GameOverPopup;\n","import React, { Component } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\n\nclass CountDown extends Component {\n  constructor(props) {\n    super(props);\n    this.tick = this.tick.bind(this);\n    this.state = { seconds: props.seconds };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.tick, 1000);\n  }\n\n  tick() {\n    if (this.state.seconds > 0) {\n      this.setState({ seconds: this.state.seconds - 1 });\n    } else {\n      clearInterval(this.timer);\n      this.props.onFinish();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <ProgressBar\n          animated\n          now={this.state.seconds * (5 / 3)}\n          label={`${this.state.seconds}sec`}\n        />\n      </div>\n    );\n  }\n}\nexport default CountDown;\n","import React, { Component } from \"react\";\nimport { database } from \"./firebase\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport Question from \"./components/question\";\nimport AnswerChoice from \"./components/answerChoice\";\nimport NextButton from \"./components/nextButton\";\nimport GameStatistics from \"./components/gameStatistics\";\nimport GameOverPopup from \"./components/gameOverPopup\";\nimport CountDown from \"./components/countDown\";\nimport entities from \"entities\";\n\nfunction getAllUrlParams(url) {\n  var queryString = url ? url.split(\"?\")[1] : window.location.search.slice(1);\n  var obj = {};\n  if (queryString) {\n    queryString = queryString.split(\"#\")[0];\n    var arr = queryString.split(\"&\");\n    for (var i = 0; i < arr.length; i++) {\n      var a = arr[i].split(\"=\");\n      var paramName = a[0];\n      var paramValue = typeof a[1] === \"undefined\" ? true : a[1];\n      paramName = paramName.toLowerCase();\n      if (typeof paramValue === \"string\") paramValue = paramValue.toLowerCase();\n      if (paramName.match(/\\[(\\d+)?\\]$/)) {\n        var key = paramName.replace(/\\[(\\d+)?\\]/, \"\");\n        if (!obj[key]) obj[key] = [];\n        if (paramName.match(/\\[\\d+\\]$/)) {\n          var index = /\\[(\\d+)\\]/.exec(paramName)[1];\n          obj[key][index] = paramValue;\n        } else {\n          obj[key].push(paramValue);\n        }\n      } else {\n        if (!obj[paramName]) {\n          obj[paramName] = paramValue;\n        } else if (obj[paramName] && typeof obj[paramName] === \"string\") {\n          obj[paramName] = [obj[paramName]];\n          obj[paramName].push(paramValue);\n        } else {\n          obj[paramName].push(paramValue);\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nlet parameters = getAllUrlParams(window.location.href);\nlet id = parameters.id ? parameters.id : \"\";\nlet isDebug =\n  parameters.isdebug === true ? true : parameters.isdebug === \"true\";\nlet isTestUser =\n  parameters.istestuser === true ? true : parameters.istestuser === \"true\";\n\nconsole.log(parameters);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      question: \"Loading...\",\n      answer: \"\",\n      wrongAnswers: [],\n      choicesArray: [\" \", \" \", \" \", \" \"],\n      chosenAnswer: \"\",\n      clickStatus: \"off\",\n      choseCorrectAnswer: false,\n      points: 0,\n      currentQuestion: 1,\n      userName: \"ddd\",\n      totalPoints: 0,\n      userLevel: \"\",\n      gameID: document.location.pathname\n        ? document.location.pathname.slice(1, 8) === \"QTrivia\"\n          ? id\n          : \"no_game_id\"\n        : \"no_location_pathname\",\n      userId: null,\n      isInitialiser: false,\n      gameTime: 0,\n      gameLib: {},\n      gameBegin: \"\",\n      gameEnd: null,\n      pointsTable: []\n    };\n  }\n\n  componentDidMount() {\n    this.getUserId();\n    database\n      .ref(`rooms/${this.state.gameID}/gameStatus`)\n      .on(\"value\", snapshot => {\n        console.log(snapshot.val());\n        if (snapshot.val() === \"start\") {\n          try {\n            if (window.QTalkApp) {\n              window.QTalkApp.notifyGameRoundStarted();\n            }\n          } catch (e) {\n            console.log(\"Present Game started\");\n          }\n        } else if (snapshot.val() === \"end\") {\n          try {\n            if (window.QTalkApp) {\n              window.QTalkApp.notifyGameRoundEnded();\n            }\n          } catch (e) {\n            console.log(\"Present Game ended\");\n          }\n        }\n      });\n    database\n      .ref(`rooms/${this.state.gameID}/playerPoints/`)\n      .on(\"value\", snapshot => {\n        if (snapshot.val()) {\n          let abc = Object.entries(snapshot.val());\n          this.setState({ pointsTable: abc });\n        }\n      });\n  }\n\n  getUserId = () => {\n    console.log(\"getUser Id functions\", this.state.gameID);\n\n    if (!this.state.userId) {\n      console.log(\"[App.js] getUserId()\");\n      let token, userId, userName;\n      let playerList = {\n        id: [0, 0],\n        name: [\"\", \"\"]\n      };\n\n      try {\n        token = window.QTalkApp.getUserAuthToken();\n      } catch (e) {\n        // token = \"\";\n        token = \"cdc9b8e03a9e85e02a425983028b602ecdd7bdd5\";\n      }\n\n      let url = isDebug\n        ? \"https://staging.remote.qtalk.io/v1/verifyAuthIdToken\"\n        : \"https://remote.qtalk.io/v1/verifyAuthIdToken\";\n\n      if (isTestUser) {\n        url = url + \"?isTestUser=true\";\n      }\n\n      console.log(url);\n\n      if (token) {\n        fetch(url, {\n          method: \"GET\",\n          headers: {\n            \"X-Auth-Id-Token\": token ? token : \"\"\n          }\n        })\n          .then(response => {\n            return response.json();\n          })\n          .then(data => {\n            console.log(data.userId);\n            userId = data.userId;\n            userName = data.userDetails.displayName;\n            this.setState({\n              userId: userId ? userId : \"newid\",\n              userName: userName ? userName : \"newname\"\n            });\n          })\n          .catch(e => {\n            console.log(e);\n          });\n      }\n\n      database\n        .ref(`rooms/${this.state.gameID}/players`)\n        .once(\"value\", snapshot => {\n          if (snapshot) {\n            console.log(snapshot);\n            console.log(snapshot.val());\n\n            playerList = snapshot.val();\n\n            if (!playerList) {\n              playerList = {\n                id: [],\n                name: []\n              };\n            }\n\n            try {\n              let zeroIndex = playerList.id.indexOf(0);\n\n              if (zeroIndex !== -1) {\n                playerList.id[zeroIndex] = userId ? userId : \"testid\";\n                playerList.name[zeroIndex] = userName ? userName : \"testUser\";\n              } else {\n                if (playerList.id.length === 0) {\n                  console.log(\"hoy\");\n                  this.setState({ isInitialiser: true });\n                  this.getQuestions();\n                  database.ref(`rooms/${this.state.gameID}/`).update({\n                    initialiser: userId ? userId : 999,\n                    playerPoints: \"\"\n                  });\n                } else {\n                  database\n                    .ref(`rooms/${this.state.gameID}/gamelib`)\n                    .once(\"value\", snapshot => {\n                      let array = snapshot.val().results;\n                      this.setState({\n                        gameLib: array,\n                        gameBegin: \"true\",\n                        gameTime: 60\n                      });\n                    });\n                }\n                playerList.id.push(userId ? userId : \"testid\");\n                playerList.name.push(userName ? userName : \"testUser\");\n              }\n            } catch (error) {\n              console.log(error);\n            }\n\n            this.setState({\n              userName: userName,\n              userId: userId,\n              playerList: playerList,\n              loading: false\n            });\n\n            console.log(playerList);\n            database.ref(`rooms/${this.state.gameID}/players`).set(playerList);\n          }\n        });\n      console.log(\"token\", token);\n    }\n  };\n\n  getQuestions = () => {\n    fetch(`https://opentdb.com/api.php?amount=60`)\n      .then(res => res.json())\n      .then(apiData => {\n        database.ref(`rooms/${this.state.gameID}`).update({\n          gamelib: apiData,\n          gameStatus: \"start\"\n        });\n        this.setState({\n          gameLib: apiData.results,\n          gameBegin: \"true\",\n          gameTime: 60\n        });\n      });\n  };\n\n  getState = () => {\n    let i = this.state.currentQuestion - 1;\n    let list = this.state.gameLib[i];\n    console.log(i);\n    let wrongchoices = list.incorrect_answers;\n    let rightchoice = list.correct_answer;\n    let multipleOptions = this.shuffleChoices(wrongchoices, rightchoice);\n    let que = entities.decodeHTML(list.question);\n    this.setState({\n      question: que,\n      answer: list.correct_answer,\n      choicesArray: multipleOptions\n    });\n  };\n\n  shuffleChoices = (wrongOptions, rightOption) => {\n    let choiceArray = wrongOptions.concat(rightOption);\n    for (let i = 0; i < choiceArray.length; i++) {\n      choiceArray[i] = entities.decodeHTML(choiceArray[i]);\n    }\n    choiceArray = choiceArray.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n\n    return choiceArray;\n  };\n\n  handleOptionClick = e => {\n    let chosenOption = e.target.textContent;\n\n    if (chosenOption === this.state.answer) {\n      this.setState({\n        clickStatus: \"on\",\n        choseCorrectAnswer: true,\n        chosenAnswer: chosenOption,\n        points: this.state.points + 20\n      });\n    } else {\n      this.setState({\n        clickStatus: \"on\",\n        choseCorrectAnswer: false,\n        chosenAnswer: chosenOption\n      });\n    }\n  };\n\n  handleClickOfNext = () => {\n    this.setState({\n      currentQuestion: this.state.currentQuestion + 1,\n      chosenAnswer: \"\",\n      clickStatus: \"off\",\n      choseCorrectAnswer: false\n    });\n    this.getState();\n  };\n\n  resetGameBegin = () => {\n    this.setState({ gameBegin: \"false\" });\n  };\n\n  setGameEnd = () => {\n    this.setState({ gameEnd: true });\n\n    let name = this.state.userName\n      ? this.state.userName\n      : Math.random()\n          .toString(36)\n          .substring(7);\n    database\n      .ref(`rooms/${this.state.gameID}/playerPoints/${name}`)\n      .set(this.state.points);\n  };\n\n  render() {\n    let stat = this.state.gameBegin;\n    let gameEnd = this.state.gameEnd;\n    let popup;\n    if (stat === \"true\" && this.state.gameLib !== null) {\n      this.getState();\n      this.resetGameBegin();\n    }\n    if (gameEnd) {\n      popup = <GameOverPopup points={this.state.pointsTable} />;\n    } else {\n      popup = \"\";\n    }\n    return (\n      <div className=\"App\">\n        <Container className=\"noPadding\">\n          <CountDown seconds={60} onFinish={this.setGameEnd} />\n          <GameStatistics\n            gamePoints={this.state.points}\n            currentQuestion={this.state.currentQuestion}\n          />\n          <Row>\n            <Question ques={this.state.question} />\n          </Row>\n          {this.state.choicesArray.map((element, index) => (\n            <AnswerChoice\n              key={index}\n              answerOption={element}\n              handleClick={this.handleOptionClick}\n              chosenAnswer={this.state.chosenAnswer}\n              revealresult={this.state.choseCorrectAnswer}\n              clickStatus={this.state.clickStatus}\n              correctAnswer={this.state.answer}\n              prophistory={this.props.history}\n              points={this.state.points}\n            />\n          ))}\n\n          <NextButton\n            text=\"Next\"\n            clickStatus={this.state.clickStatus}\n            onClickOfNext={this.handleClickOfNext}\n            choseCorrectAnswer={this.state.choseCorrectAnswer}\n          />\n          {popup}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport \"./instructions.css\";\n\nconst Instructions = () => {\n  return (\n    <>\n      <Container>\n        <div className=\"progCard \">\n          <Row>\n            <Col>\n              <h3>How to Play</h3>\n              <ul className=\"textAllignLeft\">\n                <li>\n                  You should choose the correct answer from the four multiple\n                  choices given.\n                </li>\n                <li>\n                  For each Correct answer, you get 20 points and can advance to\n                  next question by clicking on next button\n                </li>{\" \"}\n                <li>\n                  Earn Maximum points by answering as many questions you can in\n                  60 seconds..!! Make your moves fast !!\n                </li>\n              </ul>\n              <div>\n                <Link to=\"/\">\n                  <Button variant=\"danger\">Home</Button>\n                </Link>\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </Container>\n    </>\n  );\n};\n\nexport default Instructions;\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport home from \"./home\";\n\nimport App from \"./App\";\nimport Instructions from \"./components/instructions\";\n\nconst AppRouter = () => {\n  return (\n    <Router basename=\"/QTrivia\">\n      <div>\n        <Route path=\"/\" exact component={home} />\n        <Route path=\"/game/\" component={App} />\n        <Route path=\"/howToPlay/\" component={Instructions} />\n      </div>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AppRouter from \"./appRouter\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<AppRouter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logoTransparent.90bfb623.png\";","module.exports = __webpack_public_path__ + \"static/media/Button-Play-icon.6ea0c212.png\";","module.exports = __webpack_public_path__ + \"static/media/qmark.75b3d39c.png\";"],"sourceRoot":""}